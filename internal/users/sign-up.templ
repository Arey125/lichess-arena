package users

import (
	"lichess-arena/internal/ui"
	"net/http"
	"fmt"
)

templ signUp() {
	@ui.Base() {
		<div class="container">
			<section class="section">
				<h1 class="title">Sign Up</h1>
				<div class="column is-half-tablet">
					<form action="/sign-up" method="POST" novalidate x-data="{pass: '', repeatedPass: ''}">
						@ui.TextInput(ui.TextInputOptions{
							Icon: &ui.UserIcon,
							Attrs: templ.Attributes{
								"placeholder": "Username",
								"name":        "name",
							}})
						@ui.PasswordTextInput(ui.TextInputOptions{
							Icon: &ui.LockIcon,
							Attrs: templ.Attributes{
								"placeholder": "Password",
								"name":        "password",
								"x-model":     "pass",
							}})
						@ui.PasswordTextInput(ui.TextInputOptions{
							Icon: &ui.LockIcon,
							Attrs: templ.Attributes{
								"placeholder": "Repeat password",
								"name":        "repeated_password",
								"x-model":     "repeatedPass",
							}})
						<button
							type="submit"
							class="button"
							:disabled="pass.length < 8 || repeatedPass.length < 8 || pass != repeatedPass"
						>Sign up</button>
					</form>
				</div>
			</section>
		</div>
	}
}

func (s Service) signUpPost(w http.ResponseWriter, r *http.Request) {
    fmt.Printf("Sign up post\n")
	name := r.FormValue("name")
	password := r.FormValue("password")
	repeated_password := r.FormValue("repeated_password")

	if len(name) < 3 || len(password) < 8 || password != repeated_password {
		http.Redirect(w, r, "/login", http.StatusSeeOther)
		return
	}

    s.session.Put(r.Context(), "test", "test string")

	err := s.model.Insert(name, password)
	if err != nil {
		http.Redirect(w, r, "/login", http.StatusSeeOther)
		return
	}

	http.Redirect(w, r, "/", http.StatusSeeOther)
}
